import disnake
from disnake.ext import commands, tasks
import json
import os
import time
import random
import asyncio
import numpy as np
import keep_alive
import datetime
import numpy as np
import psutil

intents = disnake.Intents.default()
intents.typing = False
intents.presences = False
intents.message_content = True
intents.voice_states = True

bot = commands.Bot(command_prefix='!', intents=intents)
bot.start_time = datetime.datetime.utcnow()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞


ping_emojis = {
    'low': '<:low_ping:1134121975862808681>',
    'medium': '<:medium_ping:1134121971525894224>',
    'high': '<:high_ping:1134121974591914004>'
}

@bot.command(
    name='ping',
    description='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ –±–æ—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É'
)
async def ping(ctx):
    ping = bot.latency

    ping_intervals = np.clip(ping, [0, 0.1, 0.2], [0.1, 0.2, 100])
    ping_category = ['low', 'medium', 'high'][np.argmax(ping_intervals)]

    ping_emoji = ping_emojis.get(ping_category, 'üî≥')

    current_time = datetime.datetime.utcnow()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    
    uptime = current_time - bot.start_time  # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞
    uptime_str = str(uptime)

    guild_count = len(bot.guilds)

    cpu_percent = psutil.cpu_percent()
    memory = psutil.virtual_memory()
    disk_usage = psutil.disk_usage('/')

    embed = disnake.Embed(
        title="–ü–∏–Ω–≥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
        description=f"–ü–∏–Ω–≥: {ping_emoji} `{ping * 1000:.0f}ms`\n"
                    f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å CPU: {cpu_percent}%\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏: {memory.percent}%\n"
                    f"–°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_usage.free / (1024 ** 3):.2f} GB / {disk_usage.total / (1024 ** 3):.2f} GB\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ {guild_count} —Å–µ—Ä–≤–µ—Ä–∞—Ö",
        color=disnake.Color.blue()
    )
    embed.set_footer(text="¬© Florida Project")

    await ctx.send(embed=embed)

# –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–ø—á–∏
async def create_captcha_channel(member):
    guild = member.guild
    channel_name = f'{member.name}-captcha-training'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_channel = disnake.utils.get(guild.text_channels, name=channel_name)
    
    if existing_channel:
        return existing_channel
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–∞
    overwrites = {
        guild.default_role: disnake.PermissionOverwrite(read_messages=False),
        member: disnake.PermissionOverwrite(read_messages=True, send_messages=True),
        bot.user: disnake.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    
    channel = await guild.create_text_channel(name=channel_name, overwrites=overwrites)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = await channel.send(
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention}!\n'
        '–≠—Ç–æ –≤–∞—à –∫–∞–Ω–∞–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–ø—á–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é "üîî", '
        '–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å.'
    )
    await welcome_message.add_reaction('üîî')
    
    return channel

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ "üîî"
def check_bell_reaction(reaction, user):
    return str(reaction.emoji) == 'üîî' and user != bot.user

# –ö–æ–º–∞–Ω–¥–∞ /training
@bot.slash_command(name='training', description='–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–ø—á–∏')
async def training(ctx: disnake.ApplicationCommandInteraction):
    member = ctx.author
    await ctx.send(f'{member.mention}, –ü–µ—Ä–µ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')

    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–ø—á–∏
    captcha_channel = await create_captcha_channel(member)
    
    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é "üîî"
    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=300.0, check=check_bell_reaction)
    except asyncio.TimeoutError:
        await captcha_channel.send('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.')
        await captcha_channel.delete()
    else:
        await asyncio.sleep(1)  # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É
        await reaction.clear()
        await captcha_channel.send(
            '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–≤–µ–¥–∏—Ç–µ 10 –∫–∞–ø—á–µ–π, –∫–∞–∂–¥–∞—è –∏–∑ 5 —Ü–∏—Ñ—Ä.'
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á–∏ –∏ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
        captcha_answers = []
        captcha_times = {}
        for i in range(10):
            captcha = ''.join(random.choices('0123456789', k=5))
            captcha_message = await captcha_channel.send(
                f'–ö–∞–ø—á–∞ #{i + 1}: –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É: `{captcha}`'
            )
            start_time = time.time()
            try:
                message = await bot.wait_for(
                    'message',
                    timeout=300.0,
                    check=lambda m: m.channel == captcha_channel and m.author == member
                )
            except asyncio.TimeoutError:
                await captcha_message.edit(content=f'–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É #{i + 1} –∏—Å—Ç–µ–∫–ª–æ.')
            else:
                if len(message.content) != 5 or not message.content.isdigit():
                    await captcha_message.edit(content=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–ø—á–∏ #{i + 1}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä.')
                else:
                    user_captcha = message.content
                    correct = all(user_captcha[j] == captcha[j] for j in range(5))
                    if correct:
                        captcha_answers.append(user_captcha)
                        end_time = time.time()
                        captcha_times[i + 1] = end_time - start_time
                        await captcha_message.edit(content=f'–ö–∞–ø—á–∞ #{i + 1}: –í–µ—Ä–Ω–æ ‚úÖ')
                    else:
                        await captcha_message.edit(content=f'–ö–∞–ø—á–∞ #{i + 1}: –ù–µ–≤–µ—Ä–Ω–æ ‚ùå')
                    await asyncio.sleep(1)
                    await message.delete(delay=1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        score = len(captcha_answers)
        medals = get_medals(score)
        result_embed = disnake.Embed(
            title='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            description=f'{member.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª–∏ {score} –∫–∞–ø—á(–∏): {medals}',
            color=disnake.Color.green()
        )
        await captcha_channel.send(embed=result_embed)
        
        # –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_times = sorted(captcha_times.items(), key=lambda x: x[1])
        top_times_embed = disnake.Embed(
            title='–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
            color=disnake.Color.gold()
        )
        for i, (captcha_num, time_taken) in enumerate(sorted_times):
            top_times_embed.add_field(
                name=f'–ö–∞–ø—á–∞ #{captcha_num}',
                value=f'{time_taken:.2f} —Å–µ–∫',
                inline=False
            )
        await captcha_channel.send(embed=top_times_embed)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        await captcha_channel.set_permissions(member, read_messages=True, send_messages=False)
        await captcha_channel.set_permissions(bot.user, read_messages=True, send_messages=True)
        await captcha_channel.send('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞–ø—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.')
        await asyncio.sleep(30)
        await captcha_channel.delete()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º–µ–¥–∞–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def get_medals(score):
    medals = ''
    if score == 10:
        medals += 'ü•á –ó–æ–ª–æ—Ç–∞—è –º–µ–¥–∞–ª—å'
    elif score >= 5:
        medals += 'ü•à –°–µ—Ä–µ–±—Ä—è–Ω–∞—è –º–µ–¥–∞–ª—å'
    return medals

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('user_data'):
    os.makedirs('user_data')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data(user_id):
    file_path = f'user_data/{user_id}.json'
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return json.load(file)
    else:
        return {'balance': 0, 'last_work': None}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
def save_user_data(user_id, user_data):
    file_path = f'user_data/{user_id}.json'
    with open(file_path, 'w') as file:
        json.dump(user_data, file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
try:
    with open('data.json', 'r') as file:
        data = json.load(file)
except FileNotFoundError:
    data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON-—Ñ–∞–π–ª –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
@bot.event
async def on_disconnect():
    with open('data.json', 'w') as file:
        json.dump(data, file)

# –ö–æ–º–∞–Ω–¥–∞ /work —Å –∫—É–ª–¥–∞—É–Ω–æ–º –Ω–∞ 24 —á–∞—Å–∞
@bot.slash_command(name='work', description='–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å Demidov coins—ã')
async def work(ctx):
    user_id = str(ctx.author.id)
    user_data = load_user_data(user_id)
    
    last_work = user_data.get('last_work', None)
    if last_work is not None:
        last_work = datetime.datetime.fromisoformat(last_work)
        time_difference = datetime.datetime.now() - last_work
        if time_difference.total_seconds() < 24 * 60 * 60:
            time_left = 24 * 60 * 60 - time_difference.total_seconds()
            hours_left = int(time_left / 3600)
            minutes_left = int((time_left % 3600) / 60)
            seconds_left = int(time_left % 60)
            await ctx.send(f'–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours_left} —á. {minutes_left} –º–∏–Ω. {seconds_left} —Å–µ–∫.')
            return

    earnings = random.randint(20, 150)
    user_data['balance'] += earnings
    user_data['last_work'] = datetime.datetime.now().isoformat()
    save_user_data(user_id, user_data)

    await ctx.send(f'–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} Demidov coins!')

# –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.slash_command(name='balance', description='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def balance(ctx):
    user_id = str(ctx.author.id)
    user_data = load_user_data(user_id)
    balance = user_data['balance']
    await ctx.send(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Demidov coins')

# –ö–æ–º–∞–Ω–¥–∞ /checkbalance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.slash_command(name='checkbalance', description='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def check_balance(ctx, member: disnake.Member):
    user_id = str(member.id)
    user_data = load_user_data(user_id)
    balance = user_data['balance']
    await ctx.send(f'–ë–∞–ª–∞–Ω—Å {member.mention}: {balance} Demidov coins')

#—Ä–µ–¥–∞–∫—Ç –±–∞–ª–∞–Ω—Å–∞
@bot.slash_command(name='setbalance', description='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
@commands.has_permissions(administrator=True)
async def set_balance(ctx, member: disnake.Member, new_balance: int):
    user_id = str(member.id)
    user_data = load_user_data(user_id)

    if new_balance >= 0:
        user_data['balance'] += new_balance
        message = f'–ë–∞–ª–∞–Ω—Å {member.mention} —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {new_balance} Demidov coins'
    else:
        user_data['balance'] -= abs(new_balance)
        message = f'–ë–∞–ª–∞–Ω—Å {member.mention} —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {abs(new_balance)} Demidov coins'

    save_user_data(user_id, user_data)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (embed) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    embed = disnake.Embed(title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", color=disnake.Color.blue())
    embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ:", value=message)
    embed.add_field(name="–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", value=user_data['balance'], inline=False)

    await ctx.send(embed=embed)

@bot.slash_command(name='pay', description='–ü–µ—Ä–µ–¥–∞—Ç—å Demidov coins—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
async def pay(ctx, target_user: disnake.User, amount: int):
    sender_user = ctx.author

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –±—ã–ª —Ç–µ–º –∂–µ —Å–∞–º—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if sender_user.id == target_user.id:
        await ctx.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å Demidov coins—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    sender_balance = load_user_data(sender_user.id)['balance']
    if sender_balance < amount:
        await ctx.send(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Demidov coins –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance} Demidov coins.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π
    if amount <= 0:
        await ctx.send('–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    sender_balance -= amount
    target_balance = load_user_data(target_user.id)['balance']
    target_balance += amount

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    save_user_data(sender_user.id, {'balance': sender_balance})
    save_user_data(target_user.id, {'balance': target_balance})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    await ctx.send(f'{sender_user.mention} –ø–µ—Ä–µ–¥–∞–ª {target_user.mention} {amount} Demidov conins. –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance} Demidov conins, {target_user.mention}: {target_balance} Demidov conins.')



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 1 Demidov coins—ã –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.event
async def on_message(message):
    if not message.author.bot:
        user_id = str(message.author.id)
        user_data = load_user_data(user_id)
        user_data['balance'] += 1
        save_user_data(user_id, user_data)

    await bot.process_commands(message)

# –¢–∞–π–º–µ—Ä –¥–ª—è –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è Demidov coins
@tasks.loop(hours=1)
async def hourly_income():
    for user_id in data.keys():
        earnings = random.randint(10, 50)
        data[user_id]['balance'] = data[user_id].get('balance', 0) + earnings

@hourly_income.before_loop
async def before_hourly_income():
    await bot.wait_until_ready()
    now = datetime.datetime.now()
    next_hour = (now + datetime.timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
    delay = (next_hour - now).total_seconds()
    await asyncio.sleep(delay)

hourly_income.start()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PayDay –∫–∞–∂–¥—ã–π —á–∞—Å
@tasks.loop(hours=1)
async def payday_notification():
    payday_channel_id = 1144935950074527788  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ PayDay
    payday_channel = bot.get_channel(payday_channel_id)

    if payday_channel:
        await payday_channel.send('PayDay! –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã!')

@payday_notification.before_loop
async def before_payday_notification():
    await bot.wait_until_ready()
    now = datetime.datetime.now()
    next_hour = (now + datetime.timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
    delay = (next_hour - now).total_seconds()
    await asyncio.sleep(delay)

payday_notification.start()


keep_alive.keep_alive()

bot.run("secret-token")
